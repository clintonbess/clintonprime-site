name: Deploy (Dev)
on:
  push:
    branches: [dev]
  workflow_dispatch:

env:
  WEB_ROOT: /var/www/html/clintonprime
  API_REPO_DIR: /opt/clintonprime-site
  PM2_NAME: clintonprime-api-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # 1️⃣ Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2️⃣ Node + pnpm (ensure pnpm is on PATH)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            apps/**/pnpm-lock.yaml
            libs/**/pnpm-lock.yaml

      - name: Install pnpm and add to PATH
        shell: bash
        run: |
          # Corepack route (preferred)
          corepack enable
          # Explicit PNPM_HOME so the shim dir is on PATH across steps
          echo "PNPM_HOME=$HOME/.local/share/pnpm" >> $GITHUB_ENV
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH
          # Activate a known pnpm version (or read from packageManager)
          corepack prepare pnpm@9 --activate || true

          # Fallback: global install if corepack ever flakes
          if ! command -v pnpm >/dev/null 2>&1; then
            npm i -g pnpm@9
            echo "$(npm prefix -g)/bin" >> $GITHUB_PATH
          fi

          pnpm -v
          which pnpm

      # 3️⃣ Build Frontend
      - name: Build Web
        working-directory: apps/web
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      # 4️⃣ Package Frontend
      - name: Package Web
        run: tar -C apps/web -czf web-dist.tar.gz dist

      # 5️⃣ Copy Frontend to Server
      - name: Upload Web
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          source: web-dist.tar.gz
          target: /tmp/

      # 6️⃣ Deploy Frontend on Server
      - name: Deploy Web
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          script: |
            sudo mkdir -p $WEB_ROOT
            sudo rm -rf $WEB_ROOT/*
            sudo tar -xzf /tmp/web-dist.tar.gz -C $WEB_ROOT --strip-components=1
            sudo chown -R www-data:www-data $WEB_ROOT
            sudo nginx -t && sudo systemctl reload nginx

      # 7️⃣ Write .env on server (dev)
      - name: Write .env on server (dev)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          script: |
            mkdir -p $API_REPO_DIR/libs/api
            cat > $API_REPO_DIR/libs/api/.env << 'EOF'
            NODE_ENV=production
            PORT=3000
            PUBLIC_BASE_URL=https://dev.clintonprime.com

            SESSION_SECRET=${{ secrets.SESSION_SECRET_DEV }}

            SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID_DEV }}
            SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET_DEV }}
            SPOTIFY_REDIRECT_URI=https://dev.clintonprime.com/api/spotify/callback

            SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN_DEV }}
            SPOTIFY_ACCESS_TOKEN=${{ secrets.SPOTIFY_ACCESS_TOKEN_DEV || '' }}
            EOF

      # 8️⃣ Deploy API (git pull + build + pm2 restart)
      - name: Deploy API
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          script: |
            if [ ! -d "$API_REPO_DIR/.git" ]; then
              sudo mkdir -p $API_REPO_DIR
              sudo chown -R $USER:$USER $API_REPO_DIR
              git clone https://github.com/${{ github.repository }} $API_REPO_DIR
            fi

            cd $API_REPO_DIR
            git fetch --all --tags
            git checkout -f ${{ github.sha }}

            # Ensure pnpm exists on the server and is on PATH
            corepack enable || true
            echo "PNPM_HOME=$HOME/.local/share/pnpm" >> $HOME/.profile
            export PNPM_HOME=$HOME/.local/share/pnpm
            export PATH="$PNPM_HOME:$PATH"
            corepack prepare pnpm@9 --activate || npm i -g pnpm@9
            pnpm -v || { echo "pnpm missing" >&2; exit 1; }

            cd libs/api
            pnpm install --frozen-lockfile
            pnpm build

            pm2 describe $PM2_NAME >/dev/null 2>&1 && pm2 restart $PM2_NAME || pm2 start dist/index.js --name $PM2_NAME
            pm2 save
