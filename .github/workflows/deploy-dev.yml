name: Deploy (Dev) — Server Build + Minimal Deploy
on:
  push:
    branches: [dev]
  workflow_dispatch:

concurrency:
  group: deploy-dev-build-only
  cancel-in-progress: true

env:
  WEB_ROOT: /var/www/html/clintonprime
  CURRENT_API: /opt/clintonprime-site/current-api
  PM2_NAME: clintonprime-api-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm (for web build on runner)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---------- WEB ----------
      - name: Install & Build Web
        working-directory: apps/web
        run: |
          pnpm install
          pnpm build
          test -f dist/index.html

      - name: Package Web Dist
        run: tar -C apps/web -czf web-dist.tar.gz dist

      # ---------- API ----------
      - name: Install & Build API
        working-directory: libs/api
        run: |
          pnpm install
          pnpm build
          ls -lah dist
          test -f dist/index.js

      - name: Package API Runtime (dist + node_modules + package.json + public)
        run: tar -C libs/api -czf api-runtime.tar.gz dist node_modules package.json public

      # ---------- VERIFY ----------
      - name: Verify archives exist
        run: |
          ls -lh web-dist.tar.gz api-runtime.tar.gz
          echo "api-runtime contents:" && tar -tzf api-runtime.tar.gz | head -n 50

      # ---------- SECRETS PREFLIGHT ----------
      - name: Secrets preflight
        run: |
          [ -n "${{ secrets.LIGHTSAIL_HOST_DEV }}" ] || (echo "LIGHTSAIL_HOST_DEV missing" && exit 1)
          [ -n "${{ secrets.LIGHTSAIL_USER_DEV }}" ] || (echo "LIGHTSAIL_USER_DEV missing" && exit 1)
          [ -n "${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}" ] || (echo "LIGHTSAIL_SSH_KEY_DEV missing" && exit 1)

      # ---------- UPLOAD ----------
      - name: Upload archives to server (/tmp)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          source: "web-dist.tar.gz,api-runtime.tar.gz"
          target: /tmp/
          debug: true

      # ---------- DEPLOY ----------
      - name: Deploy to server and start PM2 (MVP)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          script_stop: true
          script: |
            set -euo pipefail
            WEB_ROOT="${{ env.WEB_ROOT }}"
            CURRENT_API="${{ env.CURRENT_API }}"
            PM2_NAME="${{ env.PM2_NAME }}"
            SHA="${{ github.sha }}"
            WORK="/tmp/cp-build-${SHA:0:12}"
            OWNER="$(whoami)"
            PORT=3000
            NODE_ENV=production
            export PORT NODE_ENV

            echo "[server] prepare workdir: $WORK"
            rm -rf "$WORK"
            mkdir -p "$WORK/web" "$WORK/api"

            echo "[server] unpacking artifacts"
            tar -xzf /tmp/web-dist.tar.gz -C "$WORK/web"
            tar -xzf /tmp/api-runtime.tar.gz -C "$WORK/api"
            rm -f /tmp/web-dist.tar.gz /tmp/api-runtime.tar.gz

            echo "[server] ensure tools"
            sudo apt-get update -y
            sudo apt-get install -y rsync curl
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi
            export PATH="$(npm config get prefix 2>/dev/null)/bin:/usr/local/bin:$PATH"

            echo "[server] deploy web -> $WEB_ROOT"
            sudo mkdir -p "$WEB_ROOT"
            sudo rsync -a --delete "$WORK/web/dist/" "$WEB_ROOT/"
            sudo chown -R www-data:www-data "$WEB_ROOT"
            if command -v nginx >/dev/null 2>&1; then
              sudo nginx -t && sudo systemctl reload nginx || true
            fi

            echo "[server] stash existing .env if present"
            PRESERVE_ENV="$WORK/.env.keep"
            if [ -f "$CURRENT_API/.env" ]; then
              sudo cp "$CURRENT_API/.env" "$PRESERVE_ENV"
              echo "[server] stashed .env"
            fi

            echo "[server] deploy api -> $CURRENT_API (exclude .env)"
            sudo mkdir -p "$CURRENT_API"
            sudo rsync -a --exclude='.env' --exclude='.env.*' "$WORK/api/" "$CURRENT_API/"
            sudo chown -R "$OWNER:$OWNER" "$CURRENT_API"

            echo "[server] restore or create .env"
            if [ -f "$PRESERVE_ENV" ]; then
              sudo install -m 600 -o "$OWNER" -g "$OWNER" "$PRESERVE_ENV" "$CURRENT_API/.env"
              echo "[server] restored existing .env"
            elif [ ! -f "$CURRENT_API/.env" ]; then
              cat > "$WORK/.env.new" <<EOF
            NODE_ENV=production
            PORT=3000
            PUBLIC_BASE_URL=https://dev.clintonprime.com

            SESSION_SECRET=${{ secrets.SESSION_SECRET_DEV }}

            SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID_DEV }}
            SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET_DEV }}
            SPOTIFY_REDIRECT_URI=https://dev.clintonprime.com/api/spotify/callback
            SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN_DEV }}
            SPOTIFY_ACCESS_TOKEN=${{ secrets.SPOTIFY_ACCESS_TOKEN_DEV }}
            EOF
              sudo install -m 600 -o "$OWNER" -g "$OWNER" "$WORK/.env.new" "$CURRENT_API/.env"
              echo "[server] wrote new .env"
            fi

            echo "[server] preflight: run API directly on :$PORT"
            ( PORT=$PORT NODE_ENV=$NODE_ENV node "$CURRENT_API/dist/index.js" & echo $! > "$WORK/test.pid" )
            sleep 2
            curl -fsS "http://127.0.0.1:$PORT/" >/dev/null || (echo "[server] direct node preflight FAILED"; kill "$(cat "$WORK/test.pid")" 2>/dev/null || true; exit 1)
            kill "$(cat "$WORK/test.pid")" 2>/dev/null || true

            echo "[server] start PM2 fresh on :$PORT (cwd=$CURRENT_API)"
            pm2 delete "$PM2_NAME" >/dev/null 2>&1 || true
            PORT=$PORT NODE_ENV=$NODE_ENV pm2 start "$CURRENT_API/dist/index.js" --name "$PM2_NAME" --time --cwd "$CURRENT_API"

            echo "[server] wait and check PM2 status"
            sleep 4
            pm2 status || true
            pm2 describe "$PM2_NAME" || true
            if ! pm2 status "$PM2_NAME" | grep -q "online"; then
              echo "[server] pm2 process not online, showing last logs…"
              pm2 logs "$PM2_NAME" --lines 200 --nostream || true
              # exit 1  # uncomment to hard-fail
            fi

            pm2 save || true
            echo "✅ Deployed web to $WEB_ROOT; shipped API (dist, node_modules, package.json, public) to $CURRENT_API; preserved/created .env; PM2 '$PM2_NAME' running on :$PORT"
