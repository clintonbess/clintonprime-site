name: Deploy (Dev) — Server Build Only
on:
  push:
    branches: [dev]
  workflow_dispatch:

# Keep newest run; auto-cancel older ones
concurrency:
  group: deploy-dev-build-only
  cancel-in-progress: true

jobs:
  build-and-server-run:
    runs-on: ubuntu-latest
    # keep env so environment-scoped secrets (SSH key) flow
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm (for web build on runner)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---------- WEB (build on runner, no deploy) ----------
      - name: Install & Build Web
        working-directory: apps/web
        run: |
          pnpm install
          pnpm build
          test -f dist/index.html

      - name: Package Web Dist (for visibility only)
        run: tar -C apps/web -czf web-dist.tar.gz dist

      # ---------- API (build on RUNNER; ship runtime ready) ----------
      - name: Install & Build API (runner)
        working-directory: libs/api
        run: |
          pnpm install
          pnpm build
          ls -lah dist
          test -f dist/index.js

      # Ship prebuilt dist + node_modules + package.json (no server install)
      - name: Package API Runtime (dist + node_modules + package.json)
        run: tar -C libs/api -czf api-runtime.tar.gz dist node_modules package.json

      # ---------- VERIFY ----------
      - name: Verify archives exist
        run: ls -lh web-dist.tar.gz api-runtime.tar.gz

      # ---------- SECRETS PREFLIGHT ----------
      - name: Secrets preflight
        run: |
          [ -n "${{ secrets.LIGHTSAIL_HOST_DEV }}" ] || (echo "LIGHTSAIL_HOST_DEV missing" && exit 1)
          [ -n "${{ secrets.LIGHTSAIL_USER_DEV }}" ] || (echo "LIGHTSAIL_USER_DEV missing" && exit 1)
          [ -n "${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}" ] || (echo "LIGHTSAIL_SSH_KEY_DEV missing" && exit 1)

      # ---------- UPLOAD ----------
      - name: Upload archives to server (/tmp)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          source: "web-dist.tar.gz,api-runtime.tar.gz"
          target: /tmp/
          debug: true

      # ---------- SERVER VERIFY (no rebuild, no install; smoke run) ----------
      - name: Verify on server in /tmp (smoke test prebuilt runtime)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ${{ secrets.LIGHTSAIL_USER_DEV }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY_DEV }}
          script_stop: true
          script: |
            set -euo pipefail
            SHA="${{ github.sha }}"
            WORK="/tmp/cp-build-${SHA:0:12}"

            echo "[server] preparing workdir: $WORK"
            rm -rf "$WORK"
            mkdir -p "$WORK/web-dist" "$WORK/api"

            echo "[server] unpacking web dist"
            tar -xzf /tmp/web-dist.tar.gz -C "$WORK/web-dist"
            rm -f /tmp/web-dist.tar.gz || true
            if [ -f "$WORK/web-dist/index.html" ]; then
              echo "[server] web: index.html OK"
            elif [ -f "$WORK/web-dist/dist/index.html" ]; then
              echo "[server] web: nested dist/ OK"
            else
              echo "[warn] web dist structure unexpected (continuing)"
            fi

            echo "[server] unpacking API runtime (prebuilt)"
            tar -xzf /tmp/api-runtime.tar.gz -C "$WORK/api"
            rm -f /tmp/api-runtime.tar.gz

            echo "[server] verifying API build artifacts"
            test -f "$WORK/api/dist/index.js"
            test -d "$WORK/api/node_modules"

            echo "[server] node version:"
            node -v || true

            echo "[server] smoke-run API on ephemeral port"
            PORT=3101 NODE_ENV=production node "$WORK/api/dist/index.js" & echo $! > "$WORK/api.pid"
            sleep 2
            curl -fsS "http://127.0.0.1:3101/" || (echo "[server] smoke check failed" && kill $(cat "$WORK/api.pid") && exit 1)
            kill $(cat "$WORK/api.pid") || true
            rm -f "$WORK/api.pid"

            echo "✅ Server has runnable build at $WORK"
