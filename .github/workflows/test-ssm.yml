name: Test: OIDC + SSM

on:
  workflow_dispatch: {}

permissions:
  id-token: write     # needed for OIDC
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Find dev instance by tag
        id: ec2
        run: |
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=clintonprime-dev" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          echo "InstanceId=$IID"
          [ -n "$IID" ] || { echo "No instance found"; exit 1; }
          echo "id=$IID" >> "$GITHUB_OUTPUT"

      - name: Send a simple SSM command
        id: ssm
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.ec2.outputs.id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="echo hello-from-ssm && uname -a && whoami" \
            --comment "GH test command" \
            --query "Command.CommandId" --output text)
          echo "cmd=$CMD_ID" >> "$GITHUB_OUTPUT"
          echo "CommandId=$CMD_ID"

      - name: Wait for completion
        run: |
          while true; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "${{ steps.ssm.outputs.cmd }}" --details \
              --query "CommandInvocations[0].Status" --output text)
            echo "Status: $STATUS"
            case "$STATUS" in
              InProgress|Pending|Delayed) sleep 3 ;;
              Success) break ;;
              *) echo "Command failed: $STATUS"; exit 1 ;;
            esac
          done

      - name: Fetch stdout/stderr
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.ssm.outputs.cmd }}" \
            --instance-id "${{ steps.ec2.outputs.id }}" \
            --query '{StdOut:StandardOutputContent,StdErr:StandardErrorContent}' \
            --output text || true
